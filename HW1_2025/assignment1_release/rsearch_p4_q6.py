import json
import os
from pathlib import Path
import random


"""
Running random search iteration 0 with batch_size=64, lr=0.0010120411427176805, optimizer=adamw, dropout=0.0, embed_dim=256...
Running random search iteration 1 with batch_size=256, lr=0.0002609807971634846, optimizer=adamw, dropout=0.5, embed_dim=128...
Running random search iteration 2 with batch_size=256, lr=0.0003356978682224329, optimizer=adamw, dropout=0.0, embed_dim=128...
Running random search iteration 3 with batch_size=64, lr=0.000642642202804255, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 4 with batch_size=32, lr=0.0011792452946940695, optimizer=momentum, dropout=0.0, embed_dim=256...
Running random search iteration 5 with batch_size=16, lr=0.0006754473995107823, optimizer=adamw, dropout=0.0, embed_dim=128...
Running random search iteration 6 with batch_size=16, lr=0.0012435445851222402, optimizer=adam, dropout=0.2, embed_dim=128...
Running random search iteration 7 with batch_size=128, lr=0.009978956349124319, optimizer=adamw, dropout=0.2, embed_dim=256...
Running random search iteration 8 with batch_size=64, lr=0.00011216613302275246, optimizer=momentum, dropout=0.2, embed_dim=256...
Running random search iteration 9 with batch_size=32, lr=0.001181097046231929, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 10 with batch_size=32, lr=0.009694339825414242, optimizer=momentum, dropout=0.0, embed_dim=256...
Running random search iteration 11 with batch_size=64, lr=0.00033683416586339685, optimizer=momentum, dropout=0.0, embed_dim=384...
Running random search iteration 12 with batch_size=64, lr=0.009283581894706006, optimizer=adamw, dropout=0.2, embed_dim=128...
Running random search iteration 13 with batch_size=16, lr=0.0011425927336867643, optimizer=adam, dropout=0.5, embed_dim=128...
Running random search iteration 14 with batch_size=128, lr=0.0015123881910792884, optimizer=momentum, dropout=0.2, embed_dim=384...
Running random search iteration 15 with batch_size=32, lr=0.00641351625331486, optimizer=adam, dropout=0.0, embed_dim=128...
Running random search iteration 16 with batch_size=64, lr=0.0005647075725257718, optimizer=momentum, dropout=0.0, embed_dim=128...
Running random search iteration 17 with batch_size=64, lr=0.008192866782067957, optimizer=momentum, dropout=0.5, embed_dim=128...
Running random search iteration 18 with batch_size=16, lr=0.0052300824652120464, optimizer=adam, dropout=0.2, embed_dim=384...
Running random search iteration 19 with batch_size=32, lr=0.003455728792173165, optimizer=momentum, dropout=0.5, embed_dim=128...
Running random search iteration 20 with batch_size=128, lr=0.00028187719689456536, optimizer=momentum, dropout=0.0, embed_dim=128...
Running random search iteration 21 with batch_size=32, lr=0.00021335046254189748, optimizer=momentum, dropout=0.2, embed_dim=128...
Running random search iteration 22 with batch_size=16, lr=0.00011936356599224548, optimizer=momentum, dropout=0.0, embed_dim=128...
Running random search iteration 23 with batch_size=16, lr=0.0023132063349629865, optimizer=adam, dropout=0.2, embed_dim=384...
Running random search iteration 24 with batch_size=64, lr=0.00014387587262163992, optimizer=adam, dropout=0.5, embed_dim=128...
Running random search iteration 25 with batch_size=16, lr=0.0006962157826559071, optimizer=momentum, dropout=0.5, embed_dim=128...
Running random search iteration 26 with batch_size=32, lr=0.0019984736692832284, optimizer=adamw, dropout=0.2, embed_dim=384...
Running random search iteration 27 with batch_size=128, lr=0.0021451732249502873, optimizer=momentum, dropout=0.2, embed_dim=256...
Running random search iteration 28 with batch_size=256, lr=0.0009625886626286698, optimizer=adamw, dropout=0.0, embed_dim=256...
Running random search iteration 29 with batch_size=64, lr=0.0069358936970884315, optimizer=adam, dropout=0.2, embed_dim=128...
Running random search iteration 30 with batch_size=16, lr=0.00015045658478704952, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 31 with batch_size=32, lr=0.00013360485618305217, optimizer=momentum, dropout=0.2, embed_dim=256...
Running random search iteration 32 with batch_size=256, lr=0.00034832757574689526, optimizer=momentum, dropout=0.0, embed_dim=128...
Running random search iteration 33 with batch_size=128, lr=0.0009838664049231934, optimizer=momentum, dropout=0.0, embed_dim=384...
Running random search iteration 34 with batch_size=16, lr=0.009032033948574525, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 35 with batch_size=32, lr=0.002017644837606036, optimizer=adam, dropout=0.2, embed_dim=128...
Running random search iteration 36 with batch_size=256, lr=0.0005577720299821272, optimizer=adam, dropout=0.0, embed_dim=128...
Running random search iteration 37 with batch_size=256, lr=0.00011255911361363179, optimizer=adamw, dropout=0.2, embed_dim=384...
Running random search iteration 38 with batch_size=64, lr=0.00035774311910550627, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 39 with batch_size=16, lr=0.0001812482256613017, optimizer=adamw, dropout=0.2, embed_dim=128...
Running random search iteration 40 with batch_size=256, lr=0.0008728757528890732, optimizer=adamw, dropout=0.0, embed_dim=384...
Running random search iteration 41 with batch_size=32, lr=0.00024169328428776286, optimizer=momentum, dropout=0.0, embed_dim=384...
Running random search iteration 42 with batch_size=64, lr=0.001911665163238059, optimizer=adam, dropout=0.0, embed_dim=256...
Running random search iteration 43 with batch_size=16, lr=0.0012864984071752287, optimizer=momentum, dropout=0.5, embed_dim=384...
Running random search iteration 44 with batch_size=32, lr=0.002496068812392957, optimizer=momentum, dropout=0.0, embed_dim=384...
Running random search iteration 45 with batch_size=256, lr=0.0030423855958445793, optimizer=adamw, dropout=0.5, embed_dim=256...
Running random search iteration 46 with batch_size=32, lr=0.006136714558983179, optimizer=adam, dropout=0.2, embed_dim=384...
Running random search iteration 47 with batch_size=16, lr=0.0080456582182244, optimizer=adam, dropout=0.5, embed_dim=128...
Running random search iteration 48 with batch_size=256, lr=0.00017055806316741421, optimizer=adam, dropout=0.2, embed_dim=384...
Running random search iteration 49 with batch_size=32, lr=0.007566893166602131, optimizer=adam, dropout=0.0, embed_dim=256...
Best run: 0, with best checkpoint validation accuracy: 0.9740901898734174 and test accuracy: 0.7643312101910834

"""

if __name__ == "__main__":
    output_dir = 'output/p4_q6'
    Path(output_dir).mkdir(exist_ok=True, parents=True)

    n_runs_random_search = 50

    batch_size_list = [4, 5, 6, 7, 8]
    lr_min_exp, lr_max_exp = -4, -2
    max_epochs = 100
    optimizer_list = ["adam", "adamw", "momentum"]
    dropout_list = [0.0, 0.2, 0.5]
    embed_dim_list = [128, 256, 384]
    patience = 10

    best_run_id = None
    best_run_test_acc = 0
    best_run_valid_acc = 0

    for i in range(n_runs_random_search):
        batch_size = 2 ** random.choice(batch_size_list)
        lr = 10 ** random.uniform(lr_min_exp, lr_max_exp)
        optimizer = random.choice(optimizer_list)
        dropout = random.choice(dropout_list)
        embed_dim = random.choice(embed_dim_list)

        print(f"Running random search iteration {i} with batch_size={batch_size}, lr={lr}, optimizer={optimizer}, dropout={dropout}, embed_dim={embed_dim}...")

        mlp_config = json.load(open('./model_configs/mlpmixer_rsearch.json', 'r'))
        mlp_config['drop_rate'] = dropout
        mlp_config['embed_dim'] = embed_dim
        with open('./model_configs/mlpmixer_rsearch.json', 'w') as f:
            f.write(json.dumps(mlp_config, indent=4))

        run_logdir = f"{output_dir}/run_{i}"
        command = f"python main.py --model mlpmixer --model_config ./model_configs/mlpmixer_rsearch.json --batch_size {batch_size} --lr {lr} --optimizer {optimizer} --epochs {max_epochs} --patience {patience} --logdir {run_logdir} > {output_dir}/log.txt 2>&1"
        os.system(command)

        # load results.json in logdir
        run_results = json.load(open(Path(run_logdir) / 'results.json', 'r'))
        test_acc = run_results['test_acc']
        best_valid_acc = max(run_results['valid_accs'])

        if best_valid_acc > best_run_valid_acc:
            best_run_valid_acc = best_valid_acc
            best_run_test_acc = test_acc
            best_run_id = i

        run_results['batch_size'] = batch_size
        run_results['lr'] = lr
        run_results['optimizer'] = optimizer
        run_results['patience'] = patience
        run_results['max_epochs'] = max_epochs
        run_results['dropout'] = dropout
        run_results['embed_dim'] = embed_dim
        with open(Path(run_logdir) / 'results.json', 'w') as f:
            f.write(json.dumps(run_results, indent=4))

    print(f"Best run: {best_run_id}, with best checkpoint validation accuracy: {best_run_valid_acc} and test accuracy: {best_run_test_acc}")
